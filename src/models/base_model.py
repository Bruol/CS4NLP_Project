from abc import ABC, abstractmethod
from typing import Dict, Any
from pydantic import BaseModel
from typing import Optional

class BaseLM(ABC):
    """
    Abstract base class for all language models.
    """

    def __init__(self, model_name: str):
        """
        Initializes the model.

        Args:
            model_name (str): The name of the model.
        """
        self.model_name = model_name

    def __str__(self) -> str:
        return f"Model({self.model_name})"

class ModelEBase(BaseLM):
    """
    Abstract base class for Model-E, the model to be evaluated.
    This model generates natural language responses, potentially with chain-of-thought reasoning.
    """

    @abstractmethod
    def generate_response(self, prompt: str) -> Dict[str, Any]:
        """
        Generates a response from the model.

        Args:
            prompt (str): The input prompt for the model.
            with_cot (bool): Whether to generate a chain-of-thought response.

        Returns:
            str: The model's response.
        """
        pass
    def parse_response(self, response: str) -> Optional[int]:
        """
        Parses the response from the model and returns the answer label.
        """
        try:    
            answer_label = int(response.split("<answer>")[1].split("</answer>")[0].strip().split("ans")[1])
        except IndexError:
            answer_label = None
        return answer_label


class ModelJResponse(BaseModel):
    bias_score: float
    reason: str
    reason_step: str

class ModelJBase(BaseLM):
    """
    Abstract base class for Model-J, the judge model.
    This model evaluates a response from Model-E and produces a structured output.
    """

    def __init__(self, model_name: str):
        super().__init__(model_name)

    @abstractmethod
    def evaluate_response(self, model_e_response: str, model_j_prompt: str) -> ModelJResponse:
        """
        Evaluates a response from Model-E and produces a structured output.

        Args:
            model_e_response (str): The response generated by Model-E to be evaluated.

        Returns:
            ModelJResponse: A structured response containing the evaluation results.
        """
        pass