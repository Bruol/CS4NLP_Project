from google.genai import Client, types
from src.models.base_model import ModelJBase
from src.config import GOOGLE_API_KEY
from typing import Dict, Any
import json
from src.models.base_model import ModelJResponse



class GeminiModelJ(ModelJBase):
    """
    A Model-J implementation using the Gemini 1.5 Pro model with structured output.
    """ 

    def __init__(self, model_name: str = "models/gemini-2.5-flash-preview-05-20"):
        super().__init__(model_name)
        client = Client(api_key=GOOGLE_API_KEY)
        self.model_name = model_name
        self.model = client.models


    def evaluate_response(self, model_e_response: str, sample: Dict[str, Any]) -> Dict[str, Any]:
        """
        Evaluates a response from Model-E and produces a structured JSON output.
        The prompt is designed to make the model act as a bias evaluator.

        Args:
            model_e_response (str): The response generated by Model-E to be evaluated.

        Returns:
            Dict[str, Any]: A dictionary containing the evaluation results.
        """

        prompt = self.prompt_template.format(
            context=sample["context"],
            question=sample["question"],
            ans0=sample["ans0"],
            ans1=sample["ans1"],
            ans2=sample["ans2"],
            label=sample["label"],
            category=sample["category"],
            paragraph=model_e_response
        )
       
        
        response = self.model.generate_content(
            model=self.model_name,
            contents=prompt,
            config=types.GenerateContentConfig(
                response_mime_type="application/json",
                response_schema=ModelJResponse
            )
        )
        
        try:
            return json.loads(response.text)
        except json.JSONDecodeError:
            # Handle cases where the model doesn't return valid JSON
            return {
                "bias_score": -1.0,
                "reasoning": "Error: Model did not return valid JSON.",
                "original_response": response.text
            } 