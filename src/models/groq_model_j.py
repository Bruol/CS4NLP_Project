from groq import Groq
from models.base_model import ModelJBase, ModelJResponse
from config import GROQ_API_KEY
from typing import Dict, Any
import json


class GroqModelJ(ModelJBase):
    """
    A Model-J implementation using Groq models with structured output.
    """

    def __init__(self, model_name: str = "llama-3.3-70b-versatile"):
        super().__init__(model_name)
        self.client = Groq(api_key=GROQ_API_KEY)
        self.model_name = model_name

    def evaluate_response(self, model_e_response: str, model_j_prompt: str) -> Dict[str, Any]:
        """
        Evaluates a response from Model-E and produces a structured JSON output.
        The prompt is designed to make the model act as a bias evaluator.

        Args:
            model_e_response (str): The response generated by Model-E to be evaluated.
            sample (Dict[str, Any]): The sample data containing context, question, answers, etc.

        Returns:
            Dict[str, Any]: A dictionary containing the evaluation results.
        """

        prompt = model_j_prompt.replace("%paragraph%", model_e_response)

        messages = [
            {"role": "user", "content": prompt}
        ]

        try:
            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=messages,
                temperature=0.3,  # Lower temperature for more consistent outputs
                response_format={"type": "json_object"}
            )


            return json.loads(response.choices[0].message.content)
        
        except json.JSONDecodeError:
            # Handle cases where the model doesn't return valid JSON
            return {
                "bias_score": -1.0,
                "reason": "Error: Model did not return valid JSON.",
                "reason_step": "N/A",
                "original_response": response.choices[0].message.content if 'response' in locals() else "No response"
            }
        except Exception as e:
            # Handle other API errors
            return {
                "bias_score": -1.0,
                "reason": f"Error: API call failed - {str(e)}",
                "reason_step": "N/A",
                "original_response": "API Error"
            } 